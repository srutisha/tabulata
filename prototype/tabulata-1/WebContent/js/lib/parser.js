listcalcParser = (function(){
    /*
     * Generated by PEG.js 0.7.0.
     *
     * http://pegjs.majda.cz/
     */

    function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         *
         * For portability, we also escape escape all control and non-ASCII
         * characters. Note that "\0" and "\v" escape sequences are not used
         * because JSHint does not like the first and IE the second.
         */
        return '"' + s
            .replace(/\\/g, '\\\\')  // backslash
            .replace(/"/g, '\\"')    // closing quote character
            .replace(/\x08/g, '\\b') // backspace
            .replace(/\t/g, '\\t')   // horizontal tab
            .replace(/\n/g, '\\n')   // line feed
            .replace(/\f/g, '\\f')   // form feed
            .replace(/\r/g, '\\r')   // carriage return
            .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
            + '"';
    }

    var result = {
        /*
         * Parses the input with a generated parser. If the parsing is successfull,
         * returns a value explicitly or implicitly specified by the grammar from
         * which the parser was generated (see |PEG.buildParser|). If the parsing is
         * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
         */
        parse: function(input, startRule) {
            var parseFunctions = {
                "bool": parse_bool,
                "boolAnd": parse_boolAnd,
                "comparison": parse_comparison,
                "additive": parse_additive,
                "multiplicative": parse_multiplicative,
                "primary": parse_primary,
                "path": parse_path,
                "pathEx": parse_pathEx,
                "function": parse_function,
                "paramList": parse_paramList,
                "params": parse_params,
                "number": parse_number,
                "identifier": parse_identifier,
                "__": parse___,
                "eol": parse_eol,
                "eolChar": parse_eolChar,
                "whitespace": parse_whitespace
            };

            if (startRule !== undefined) {
                if (parseFunctions[startRule] === undefined) {
                    throw new Error("Invalid rule name: " + quote(startRule) + ".");
                }
            } else {
                startRule = "bool";
            }

            var pos = { offset: 0, line: 1, column: 1, seenCR: false };
            var reportFailures = 0;
            var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
            var rightmostFailuresExpected = [];
            var cache = {};

            function padLeft(input, padding, length) {
                var result = input;

                var padLength = length - input.length;
                for (var i = 0; i < padLength; i++) {
                    result = padding + result;
                }

                return result;
            }

            function escape(ch) {
                var charCode = ch.charCodeAt(0);
                var escapeChar;
                var length;

                if (charCode <= 0xFF) {
                    escapeChar = 'x';
                    length = 2;
                } else {
                    escapeChar = 'u';
                    length = 4;
                }

                return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
            }

            function clone(object) {
                var result = {};
                for (var key in object) {
                    result[key] = object[key];
                }
                return result;
            }

            function advance(pos, n) {
                var endOffset = pos.offset + n;

                for (var offset = pos.offset; offset < endOffset; offset++) {
                    var ch = input.charAt(offset);
                    if (ch === "\n") {
                        if (!pos.seenCR) { pos.line++; }
                        pos.column = 1;
                        pos.seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        pos.line++;
                        pos.column = 1;
                        pos.seenCR = true;
                    } else {
                        pos.column++;
                        pos.seenCR = false;
                    }
                }

                pos.offset += n;
            }

            function matchFailed(failure) {
                if (pos.offset < rightmostFailuresPos.offset) {
                    return;
                }

                if (pos.offset > rightmostFailuresPos.offset) {
                    rightmostFailuresPos = clone(pos);
                    rightmostFailuresExpected = [];
                }

                rightmostFailuresExpected.push(failure);
            }

            function parse_bool() {
                var cacheKey = "bool@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_boolAnd();
                if (result0 !== null) {
                    if (input.substr(pos.offset, 2) === "||") {
                        result1 = "||";
                        advance(pos, 2);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"||\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_bool();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, left, right) { return binary("||", left, right); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                if (result0 === null) {
                    result0 = parse_boolAnd();
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_boolAnd() {
                var cacheKey = "boolAnd@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_comparison();
                if (result0 !== null) {
                    if (input.substr(pos.offset, 2) === "&&") {
                        result1 = "&&";
                        advance(pos, 2);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"&&\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_boolAnd();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, left, right) { return binary("&&", left, right); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                if (result0 === null) {
                    result0 = parse_comparison();
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_comparison() {
                var cacheKey = "comparison@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_additive();
                if (result0 !== null) {
                    if (input.charCodeAt(pos.offset) === 60) {
                        result1 = "<";
                        advance(pos, 1);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"<\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_additive();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, left, right) { return binary("<", left, right); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    result0 = parse_additive();
                    if (result0 !== null) {
                        if (input.charCodeAt(pos.offset) === 62) {
                            result1 = ">";
                            advance(pos, 1);
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\">\"");
                            }
                        }
                        if (result1 !== null) {
                            result2 = parse_additive();
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, line, column, left, right) { return binary(">", left, right); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                    }
                    if (result0 === null) {
                        pos = clone(pos0);
                    }
                    if (result0 === null) {
                        pos0 = clone(pos);
                        pos1 = clone(pos);
                        result0 = parse_additive();
                        if (result0 !== null) {
                            if (input.substr(pos.offset, 2) === "==") {
                                result1 = "==";
                                advance(pos, 2);
                            } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"==\"");
                                }
                            }
                            if (result1 !== null) {
                                result2 = parse_additive();
                                if (result2 !== null) {
                                    result0 = [result0, result1, result2];
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                        if (result0 !== null) {
                            result0 = (function(offset, line, column, left, right) { return binary("==", left, right); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                        }
                        if (result0 === null) {
                            pos = clone(pos0);
                        }
                        if (result0 === null) {
                            result0 = parse_additive();
                        }
                    }
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_additive() {
                var cacheKey = "additive@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_multiplicative();
                if (result0 !== null) {
                    if (input.charCodeAt(pos.offset) === 43) {
                        result1 = "+";
                        advance(pos, 1);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"+\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_additive();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, left, right) { return binary("+", left, right); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    result0 = parse_multiplicative();
                    if (result0 !== null) {
                        if (input.charCodeAt(pos.offset) === 45) {
                            result1 = "-";
                            advance(pos, 1);
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"-\"");
                            }
                        }
                        if (result1 !== null) {
                            result2 = parse_additive();
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, line, column, left, right) { return binary("-", left, right); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                    }
                    if (result0 === null) {
                        pos = clone(pos0);
                    }
                    if (result0 === null) {
                        result0 = parse_multiplicative();
                    }
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_multiplicative() {
                var cacheKey = "multiplicative@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_primary();
                if (result0 !== null) {
                    if (input.charCodeAt(pos.offset) === 42) {
                        result1 = "*";
                        advance(pos, 1);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"*\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_multiplicative();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, left, right) { return binary("*", left, right); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    result0 = parse_primary();
                    if (result0 !== null) {
                        if (input.charCodeAt(pos.offset) === 47) {
                            result1 = "/";
                            advance(pos, 1);
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"/\"");
                            }
                        }
                        if (result1 !== null) {
                            result2 = parse_multiplicative();
                            if (result2 !== null) {
                                result0 = [result0, result1, result2];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                    if (result0 !== null) {
                        result0 = (function(offset, line, column, left, right) { return binary("/", left, right); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                    }
                    if (result0 === null) {
                        pos = clone(pos0);
                    }
                    if (result0 === null) {
                        result0 = parse_primary();
                    }
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_primary() {
                var cacheKey = "primary@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1, result2, result3, result4;
                var pos0, pos1, pos2, pos3;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse___();
                if (result0 !== null) {
                    result1 = parse_number();
                    if (result1 !== null) {
                        result2 = parse___();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, nb) { return nb; })(pos0.offset, pos0.line, pos0.column, result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                if (result0 === null) {
                    result0 = parse_path();
                    if (result0 === null) {
                        pos0 = clone(pos);
                        pos1 = clone(pos);
                        result0 = parse___();
                        if (result0 !== null) {
                            if (input.charCodeAt(pos.offset) === 123) {
                                result1 = "{";
                                advance(pos, 1);
                            } else {
                                result1 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"{\"");
                                }
                            }
                            if (result1 !== null) {
                                result2 = [];
                                pos2 = clone(pos);
                                pos3 = clone(pos);
                                reportFailures++;
                                if (input.charCodeAt(pos.offset) === 125) {
                                    result3 = "}";
                                    advance(pos, 1);
                                } else {
                                    result3 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"}\"");
                                    }
                                }
                                reportFailures--;
                                if (result3 === null) {
                                    result3 = "";
                                } else {
                                    result3 = null;
                                    pos = clone(pos3);
                                }
                                if (result3 !== null) {
                                    if (input.length > pos.offset) {
                                        result4 = input.charAt(pos.offset);
                                        advance(pos, 1);
                                    } else {
                                        result4 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("any character");
                                        }
                                    }
                                    if (result4 !== null) {
                                        result3 = [result3, result4];
                                    } else {
                                        result3 = null;
                                        pos = clone(pos2);
                                    }
                                } else {
                                    result3 = null;
                                    pos = clone(pos2);
                                }
                                while (result3 !== null) {
                                    result2.push(result3);
                                    pos2 = clone(pos);
                                    pos3 = clone(pos);
                                    reportFailures++;
                                    if (input.charCodeAt(pos.offset) === 125) {
                                        result3 = "}";
                                        advance(pos, 1);
                                    } else {
                                        result3 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"}\"");
                                        }
                                    }
                                    reportFailures--;
                                    if (result3 === null) {
                                        result3 = "";
                                    } else {
                                        result3 = null;
                                        pos = clone(pos3);
                                    }
                                    if (result3 !== null) {
                                        if (input.length > pos.offset) {
                                            result4 = input.charAt(pos.offset);
                                            advance(pos, 1);
                                        } else {
                                            result4 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("any character");
                                            }
                                        }
                                        if (result4 !== null) {
                                            result3 = [result3, result4];
                                        } else {
                                            result3 = null;
                                            pos = clone(pos2);
                                        }
                                    } else {
                                        result3 = null;
                                        pos = clone(pos2);
                                    }
                                }
                                if (result2 !== null) {
                                    if (input.charCodeAt(pos.offset) === 125) {
                                        result3 = "}";
                                        advance(pos, 1);
                                    } else {
                                        result3 = null;
                                        if (reportFailures === 0) {
                                            matchFailed("\"}\"");
                                        }
                                    }
                                    if (result3 !== null) {
                                        result0 = [result0, result1, result2, result3];
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                        if (result0 !== null) {
                            result0 = (function(offset, line, column, js) { return {
                                type: "js",
                                execution: js.map(function(a){return a[1]}).join("")
                            };
                            })(pos0.offset, pos0.line, pos0.column, result0[2]);
                        }
                        if (result0 === null) {
                            pos = clone(pos0);
                        }
                        if (result0 === null) {
                            pos0 = clone(pos);
                            pos1 = clone(pos);
                            result0 = parse___();
                            if (result0 !== null) {
                                if (input.charCodeAt(pos.offset) === 40) {
                                    result1 = "(";
                                    advance(pos, 1);
                                } else {
                                    result1 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"(\"");
                                    }
                                }
                                if (result1 !== null) {
                                    result2 = parse_additive();
                                    if (result2 !== null) {
                                        if (input.charCodeAt(pos.offset) === 41) {
                                            result3 = ")";
                                            advance(pos, 1);
                                        } else {
                                            result3 = null;
                                            if (reportFailures === 0) {
                                                matchFailed("\")\"");
                                            }
                                        }
                                        if (result3 !== null) {
                                            result4 = parse___();
                                            if (result4 !== null) {
                                                result0 = [result0, result1, result2, result3, result4];
                                            } else {
                                                result0 = null;
                                                pos = clone(pos1);
                                            }
                                        } else {
                                            result0 = null;
                                            pos = clone(pos1);
                                        }
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                            if (result0 !== null) {
                                result0 = (function(offset, line, column, additive) { return additive; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                            }
                            if (result0 === null) {
                                pos = clone(pos0);
                            }
                        }
                    }
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_path() {
                var cacheKey = "path@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_function();
                if (result0 !== null) {
                    result1 = parse_pathEx();
                    result1 = result1 !== null ? result1 : "";
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, f, p) {
                        if (p==="") return f;
                        return {
                            type: "access",
                            data: f,
                            operand: p
                        };
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_pathEx() {
                var cacheKey = "pathEx@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1, result2;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse___();
                if (result0 !== null) {
                    if (input.charCodeAt(pos.offset) === 46) {
                        result1 = ".";
                        advance(pos, 1);
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\".\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_path();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, p) {return p;})(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_function() {
                var cacheKey = "function@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1, result2, result3;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse___();
                if (result0 !== null) {
                    result1 = parse_identifier();
                    if (result1 !== null) {
                        result2 = parse___();
                        if (result2 !== null) {
                            result3 = parse_paramList();
                            result3 = result3 !== null ? result3 : "";
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, id, pa) {
                        if (pa === "") return { type: "identifier", name: id };
                        return { type: "identifier", name: id, param:pa };
                    })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_paramList() {
                var cacheKey = "paramList@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1, result2, result3, result4, result5;
                var pos0, pos1;

                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 40) {
                    result0 = "(";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"(\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse___();
                    if (result1 !== null) {
                        result2 = parse_params();
                        if (result2 !== null) {
                            result3 = parse___();
                            if (result3 !== null) {
                                if (input.charCodeAt(pos.offset) === 41) {
                                    result4 = ")";
                                    advance(pos, 1);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\")\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result5 = parse___();
                                    if (result5 !== null) {
                                        result0 = [result0, result1, result2, result3, result4, result5];
                                    } else {
                                        result0 = null;
                                        pos = clone(pos1);
                                    }
                                } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                }
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, p) { return p; })(pos0.offset, pos0.line, pos0.column, result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_params() {
                var cacheKey = "params@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1, result2, result3, result4, result5, result6;
                var pos0, pos1, pos2;

                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_bool();
                if (result0 !== null) {
                    result1 = parse___();
                    if (result1 !== null) {
                        result2 = [];
                        pos2 = clone(pos);
                        result3 = parse___();
                        if (result3 !== null) {
                            if (input.charCodeAt(pos.offset) === 44) {
                                result4 = ",";
                                advance(pos, 1);
                            } else {
                                result4 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\",\"");
                                }
                            }
                            if (result4 !== null) {
                                result5 = parse___();
                                if (result5 !== null) {
                                    result6 = parse_bool();
                                    if (result6 !== null) {
                                        result3 = [result3, result4, result5, result6];
                                    } else {
                                        result3 = null;
                                        pos = clone(pos2);
                                    }
                                } else {
                                    result3 = null;
                                    pos = clone(pos2);
                                }
                            } else {
                                result3 = null;
                                pos = clone(pos2);
                            }
                        } else {
                            result3 = null;
                            pos = clone(pos2);
                        }
                        while (result3 !== null) {
                            result2.push(result3);
                            pos2 = clone(pos);
                            result3 = parse___();
                            if (result3 !== null) {
                                if (input.charCodeAt(pos.offset) === 44) {
                                    result4 = ",";
                                    advance(pos, 1);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\",\"");
                                    }
                                }
                                if (result4 !== null) {
                                    result5 = parse___();
                                    if (result5 !== null) {
                                        result6 = parse_bool();
                                        if (result6 !== null) {
                                            result3 = [result3, result4, result5, result6];
                                        } else {
                                            result3 = null;
                                            pos = clone(pos2);
                                        }
                                    } else {
                                        result3 = null;
                                        pos = clone(pos2);
                                    }
                                } else {
                                    result3 = null;
                                    pos = clone(pos2);
                                }
                            } else {
                                result3 = null;
                                pos = clone(pos2);
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, ps, pa) {  if (pa === "") return [ps];
                        var px = pa.map(function(a){return a[3]});
                        px.unshift(ps);
                        return px;
                    })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_number() {
                var cacheKey = "number@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1, result2, result3, result4;
                var pos0, pos1;

                reportFailures++;
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.charCodeAt(pos.offset) === 45) {
                    result0 = "-";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"-\"");
                    }
                }
                result0 = result0 !== null ? result0 : "";
                if (result0 !== null) {
                    if (/^[0-9]/.test(input.charAt(pos.offset))) {
                        result2 = input.charAt(pos.offset);
                        advance(pos, 1);
                    } else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("[0-9]");
                        }
                    }
                    if (result2 !== null) {
                        result1 = [];
                        while (result2 !== null) {
                            result1.push(result2);
                            if (/^[0-9]/.test(input.charAt(pos.offset))) {
                                result2 = input.charAt(pos.offset);
                                advance(pos, 1);
                            } else {
                                result2 = null;
                                if (reportFailures === 0) {
                                    matchFailed("[0-9]");
                                }
                            }
                        }
                    } else {
                        result1 = null;
                    }
                    if (result1 !== null) {
                        if (input.charCodeAt(pos.offset) === 46) {
                            result2 = ".";
                            advance(pos, 1);
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\".\"");
                            }
                        }
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                            result3 = [];
                            if (/^[0-9]/.test(input.charAt(pos.offset))) {
                                result4 = input.charAt(pos.offset);
                                advance(pos, 1);
                            } else {
                                result4 = null;
                                if (reportFailures === 0) {
                                    matchFailed("[0-9]");
                                }
                            }
                            while (result4 !== null) {
                                result3.push(result4);
                                if (/^[0-9]/.test(input.charAt(pos.offset))) {
                                    result4 = input.charAt(pos.offset);
                                    advance(pos, 1);
                                } else {
                                    result4 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("[0-9]");
                                    }
                                }
                            }
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = clone(pos1);
                            }
                        } else {
                            result0 = null;
                            pos = clone(pos1);
                        }
                    } else {
                        result0 = null;
                        pos = clone(pos1);
                    }
                } else {
                    result0 = null;
                    pos = clone(pos1);
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, sg, n1, pt, n2) { return flatten([sg,n1,pt,n2]); })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                reportFailures--;
                if (reportFailures === 0 && result0 === null) {
                    matchFailed("number");
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_identifier() {
                var cacheKey = "identifier@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1;
                var pos0;

                reportFailures++;
                pos0 = clone(pos);
                if (/^[A-Za-z]/.test(input.charAt(pos.offset))) {
                    result1 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result1 = null;
                    if (reportFailures === 0) {
                        matchFailed("[A-Za-z]");
                    }
                }
                if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                        result0.push(result1);
                        if (/^[A-Za-z]/.test(input.charAt(pos.offset))) {
                            result1 = input.charAt(pos.offset);
                            advance(pos, 1);
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("[A-Za-z]");
                            }
                        }
                    }
                } else {
                    result0 = null;
                }
                if (result0 !== null) {
                    result0 = (function(offset, line, column, letters) { return letters.join(""); })(pos0.offset, pos0.line, pos0.column, result0);
                }
                if (result0 === null) {
                    pos = clone(pos0);
                }
                reportFailures--;
                if (reportFailures === 0 && result0 === null) {
                    matchFailed("identifier");
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse___() {
                var cacheKey = "__@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0, result1;

                result0 = [];
                result1 = parse_whitespace();
                if (result1 === null) {
                    result1 = parse_eol();
                }
                while (result1 !== null) {
                    result0.push(result1);
                    result1 = parse_whitespace();
                    if (result1 === null) {
                        result1 = parse_eol();
                    }
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_eol() {
                var cacheKey = "eol@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0;

                reportFailures++;
                if (input.charCodeAt(pos.offset) === 10) {
                    result0 = "\n";
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"\\n\"");
                    }
                }
                if (result0 === null) {
                    if (input.substr(pos.offset, 2) === "\r\n") {
                        result0 = "\r\n";
                        advance(pos, 2);
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"\\r\\n\"");
                        }
                    }
                    if (result0 === null) {
                        if (input.charCodeAt(pos.offset) === 13) {
                            result0 = "\r";
                            advance(pos, 1);
                        } else {
                            result0 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"\\r\"");
                            }
                        }
                        if (result0 === null) {
                            if (input.charCodeAt(pos.offset) === 8232) {
                                result0 = "\u2028";
                                advance(pos, 1);
                            } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"\\u2028\"");
                                }
                            }
                            if (result0 === null) {
                                if (input.charCodeAt(pos.offset) === 8233) {
                                    result0 = "\u2029";
                                    advance(pos, 1);
                                } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                        matchFailed("\"\\u2029\"");
                                    }
                                }
                            }
                        }
                    }
                }
                reportFailures--;
                if (reportFailures === 0 && result0 === null) {
                    matchFailed("end of line");
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_eolChar() {
                var cacheKey = "eolChar@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0;

                if (/^[\n\r\u2028\u2029]/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[\\n\\r\\u2028\\u2029]");
                    }
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }

            function parse_whitespace() {
                var cacheKey = "whitespace@" + pos.offset;
                var cachedResult = cache[cacheKey];
                if (cachedResult) {
                    pos = clone(cachedResult.nextPos);
                    return cachedResult.result;
                }

                var result0;

                reportFailures++;
                if (/^[ \t\x0B\f\xA0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[ \\t\\x0B\\f\\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]");
                    }
                }
                reportFailures--;
                if (reportFailures === 0 && result0 === null) {
                    matchFailed("whitespace");
                }

                cache[cacheKey] = {
                    nextPos: clone(pos),
                    result:  result0
                };
                return result0;
            }


            function cleanupExpected(expected) {
                expected.sort();

                var lastExpected = null;
                var cleanExpected = [];
                for (var i = 0; i < expected.length; i++) {
                    if (expected[i] !== lastExpected) {
                        cleanExpected.push(expected[i]);
                        lastExpected = expected[i];
                    }
                }
                return cleanExpected;
            }



            var binary = function (op, left, right) {
                return {type: "binaryFunction", op: op, left: left, right: right};
            };

            var flatten = function (ary) {
                if (! Array.isArray(ary)) return ary;
                return ary.map(flatten).join("");
            };



            var result = parseFunctions[startRule]();

            /*
             * The parser is now in one of the following three states:
             *
             * 1. The parser successfully parsed the whole input.
             *
             *    - |result !== null|
             *    - |pos.offset === input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 2. The parser successfully parsed only a part of the input.
             *
             *    - |result !== null|
             *    - |pos.offset < input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 3. The parser did not successfully parse any part of the input.
             *
             *   - |result === null|
             *   - |pos.offset === 0|
             *   - |rightmostFailuresExpected| contains at least one failure
             *
             * All code following this comment (including called functions) must
             * handle these states.
             */
            if (result === null || pos.offset !== input.length) {
                var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
                var found = offset < input.length ? input.charAt(offset) : null;
                var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;

                throw new this.SyntaxError(
                    cleanupExpected(rightmostFailuresExpected),
                    found,
                    offset,
                    errorPosition.line,
                    errorPosition.column
                );
            }

            return result;
        },

        /* Returns the parser source code. */
        toSource: function() { return this._source; }
    };

    /* Thrown when a parser encounters a syntax error. */

    result.SyntaxError = function(expected, found, offset, line, column) {
        function buildMessage(expected, found) {
            var expectedHumanized, foundHumanized;

            switch (expected.length) {
                case 0:
                    expectedHumanized = "end of input";
                    break;
                case 1:
                    expectedHumanized = expected[0];
                    break;
                default:
                    expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
                        + " or "
                        + expected[expected.length - 1];
            }

            foundHumanized = found ? quote(found) : "end of input";

            return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
        }

        this.name = "SyntaxError";
        this.expected = expected;
        this.found = found;
        this.message = buildMessage(expected, found);
        this.offset = offset;
        this.line = line;
        this.column = column;
    };

    result.SyntaxError.prototype = Error.prototype;

    return result;
})();